{"version":3,"sources":["nearest-periodic-value.js"],"names":[],"mappings":"WAAU,IAAI,EAAE,OAAO,EAAE;AACvB;AACE;;AAEA;;AAEA;;EAEH,mBAAmB;AAClB;;;;6BAIA,UAA8B,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;AAElD,QAAI,QAAQ,GAAG,CAAC,KAAK,GAAG,KAAK,CAAA,GAAI,MAAM,CAAC;;;;;AAKxC,QAAI,WAAW,GAAG,EAAE,QAAQ,GAAG,GAAG,CAAA,AAAC,IAAI,QAAQ,GAAG,CAAC,CAAC;;;;AAIpD,QAAI,GAAG,GAAG,WAAW,GAAG,MAAM,GAAG,CAAC,CAAC;;;;;AAKnC,WAAO,GAAG,IAAI,KAAK,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA,AAAC,CAAC;GACtD;;;;;AAKD,SAAO,oBAAoB,CAAC;CAC7B,CAAC,CAAC","file":"nearest-periodic-value.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports !== 'undefined') {\n    module.exports = factory();\n  } else {\n    root.nearestPeriodicValue = factory();\n  }\n})(this, function() {\n  'use strict';\n\n  /*jshint -W018 */\n  \n  function nearestPeriodicValue(point, value, period) {\n  \n    var relation = (value - point) / period;\n  \n    // We're equidistant from the nearest point if the\n    // distance from the point is a half-integer value\n    // of our period.\n    var equidistant = !(relation % 0.5) && relation % 1;\n  \n    // If we're equidistant, then we add a period to\n    // ensure that we always pick the value in front\n    var mod = equidistant ? period : 0;\n  \n    // Adjust our value by an amount given by the closest #\n    // of periods contained in the distance between the point\n    // and the value\n    return mod + (value - period * Math.round(relation));\n  }\n  \n  export default nearestPeriodicValue;\n  \n  \n  return nearestPeriodicValue;\n});\n"],"sourceRoot":"/source/"}