{"version":3,"sources":["nearest-periodic-value.js"],"names":[],"mappings":"AAAA,AAAC,CAAA,UAAU,QAAQ,SAAS;AAC1B,SAAO,YAAY,YAAY,OAAO,WAAW,cAAc,OAAO,UAAU,YAChF,OAAO,WAAW,cAAc,OAAO,MAAM,OAAO,WACpD,OAAO,uBAAuB;GAC9B,MAAM,YAAY;AAAE;;;;AAIpB,WAAS,qBAAqB,OAAO,OAAO,QAAQ;AAElD,QAAI,WAAW,CAAC,QAAQ,SAAS;;;;;AAKjC,QAAI,cAAc,EAAE,WAAW,QAAQ,WAAW;;;;AAIlD,QAAI,MAAM,cAAc,SAAS;;;;;AAKjC,WAAO,OAAO,QAAQ,SAAS,KAAK,MAAM;;;AAG5C,MAAI,yBAAyB;;AAE7B,SAAO","file":"nearest-periodic-value.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.nearestPeriodicValue = factory()\n}(this, function () { 'use strict';\n\n  /*jshint -W018 */\n\n  function nearestPeriodicValue(point, value, period) {\n\n    var relation = (value - point) / period;\n\n    // We're equidistant from the nearest point if the\n    // distance from the point is a half-integer value\n    // of our period.\n    var equidistant = !(relation % 0.5) && relation % 1;\n\n    // If we're equidistant, then we add a period to\n    // ensure that we always pick the value in front\n    var mod = equidistant ? period : 0;\n\n    // Adjust our value by an amount given by the closest #\n    // of periods contained in the distance between the point\n    // and the value\n    return mod + (value - period * Math.round(relation));\n  }\n\n  var nearest_periodic_value = nearestPeriodicValue;\n\n  return nearest_periodic_value;\n\n}));\n"],"sourceRoot":"/source/"}